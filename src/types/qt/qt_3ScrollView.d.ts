declare class Q3ScrollView extends Q3Frame {

    /* Properties */

    /* Methods */
    addChild(child: QWidget, x: number, y: number): void;
    bottomMargin(): number;
    cachedSizeHint(): QSize;
    center(x: number, y: number): void;
    center(x: number, y: number, xmargin: number, ymargin: number): void;
    center(x: number, y: number): void;
    center(x: number, y: number, xmargin: number, ymargin: number): void;
    changeFrameRect(obj: QRect): void;
    childX(child: QWidget): number;
    childY(child: QWidget): number;
    clipper(): QWidget;
    contentsContextMenuEvent(obj: QContextMenuEvent): void;
    contentsDragEnterEvent(obj: QDragEnterEvent): void;
    contentsDragLeaveEvent(obj: QDragLeaveEvent): void;
    contentsDragMoveEvent(obj: QDragMoveEvent): void;
    contentsDropEvent(obj: QDropEvent): void;
    contentsHeight(): number;
    contentsMouseDoubleClickEvent(obj: QMouseEvent): void;
    contentsMouseMoveEvent(obj: QMouseEvent): void;
    contentsMousePressEvent(obj: QMouseEvent): void;
    contentsMouseReleaseEvent(obj: QMouseEvent): void;
    contentsMoving(x: number, y: number): void;
    contentsToViewport(obj: QPoint): QPoint;
    contentsToViewport(x: number, y: number, vx: number, vy: number): void;
    contentsToViewport(obj: QPoint): QPoint;
    contentsToViewport(x: number, y: number, vx: number, vy: number): void;
    contentsWheelEvent(obj: QWheelEvent): void;
    contentsWidth(): number;
    contentsX(): number;
    contentsY(): number;
    contextMenuEvent(obj: QContextMenuEvent): void;
    cornerWidget(): QWidget;
    disableSizeHintCaching(): void;
    doDragAutoScroll(): void;
    dragAutoScroll(): boolean;
    drawContentsOffset(obj: QPainter, ox: number, oy: number): void;
    enableClipper(y: boolean): void;
    ensureVisible(x: number, y: number): void;
    ensureVisible(x: number, y: number, xmargin: number, ymargin: number): void;
    ensureVisible(x: number, y: number): void;
    ensureVisible(x: number, y: number, xmargin: number, ymargin: number): void;
    eventFilter(obj: QObject, e: QEvent): boolean;
    focusNextPrevChild(next: boolean): boolean;
    fontChange(obj: QFont): void;
    hScrollBarMode(): number;
    hasStaticBackground(): boolean;
    hbarIsPressed(): void;
    hbarIsReleased(): void;
    horizontalScrollBar(): QScrollBar;
    horizontalSliderPressed(): void;
    horizontalSliderReleased(): void;
    hslide(obj: number): void;
    isHorizontalSliderPressed(): boolean;
    isVerticalSliderPressed(): boolean;
    leftMargin(): number;
    mouseDoubleClickEvent(obj: QMouseEvent): void;
    mouseMoveEvent(obj: QMouseEvent): void;
    mousePressEvent(obj: QMouseEvent): void;
    mouseReleaseEvent(obj: QMouseEvent): void;
    moveChild(child: QWidget, x: number, y: number): void;
    moveContents(x: number, y: number): void;
    removeChild(child: QObject): void;
    removeChild(child: QWidget): void;
    removeChild(child: QObject): void;
    removeChild(child: QWidget): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    resizeContents(w: number, h: number): void;
    resizePolicy(): number;
    rightMargin(): number;
    scrollBy(dx: number, dy: number): void;
    setCachedSizeHint(sh: QSize): void;
    setContentsPos(x: number, y: number): void;
    setCornerWidget(obj: QWidget): void;
    setDragAutoScroll(b: boolean): void;
    setEnabled(enable: boolean): void;
    setHBarGeometry(hbar: QScrollBar, x: number, y: number, w: number, h: number): void;
    setHScrollBarMode(obj: number): void;
    setMargins(left: number, top: number, right: number, bottom: number): void;
    setResizePolicy(obj: number): void;
    setStaticBackground(y: boolean): void;
    setVBarGeometry(vbar: QScrollBar, x: number, y: number, w: number, h: number): void;
    setVScrollBarMode(obj: number): void;
    setVisible(visible: boolean): void;
    startDragAutoScroll(): void;
    stopDragAutoScroll(): void;
    styleChange(obj: QStyle): void;
    topMargin(): number;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    //updateScrollBars(###: \/\/): void;
    vScrollBarMode(): number;
    vbarIsPressed(): void;
    vbarIsReleased(): void;
    verticalScrollBar(): QScrollBar;
    verticalSliderPressed(): void;
    verticalSliderReleased(): void;
    viewport(): QWidget;
    viewportContextMenuEvent(obj: QContextMenuEvent): void;
    viewportDragEnterEvent(obj: QDragEnterEvent): void;
    viewportDragLeaveEvent(obj: QDragLeaveEvent): void;
    viewportDragMoveEvent(obj: QDragMoveEvent): void;
    viewportDropEvent(obj: QDropEvent): void;
    viewportMouseDoubleClickEvent(obj: QMouseEvent): void;
    viewportMouseMoveEvent(obj: QMouseEvent): void;
    viewportMousePressEvent(obj: QMouseEvent): void;
    viewportMouseReleaseEvent(obj: QMouseEvent): void;
    viewportPaintEvent(obj: QPaintEvent): void;
    viewportResizeEvent(obj: QResizeEvent): void;
    viewportSize(obj1: number, obj2: number): QSize;
    viewportToContents(obj: QPoint): QPoint;
    viewportToContents(vx: number, vy: number, x: number, y: number): void;
    viewportToContents(obj: QPoint): QPoint;
    viewportToContents(vx: number, vy: number, x: number, y: number): void;
    viewportWheelEvent(obj: QWheelEvent): void;
    visibleHeight(): number;
    visibleWidth(): number;
    vslide(obj: number): void;
    wheelEvent(obj: QWheelEvent): void;
}
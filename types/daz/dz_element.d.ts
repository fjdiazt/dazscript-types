declare class DzElement extends DzBase {

    /* Properties */

    /** Holds the number used to uniquely identify this element in the scene. (Read Only) */
    elementID: number;

    /* Methods */
    addDataItem(item: DzElementData): DzError;
    addElementChild(child: DzElement): void;
    addPrivateProperty(prop: DzProperty): DzError;
    addPrivatePropertyInternal(newprop: DzProperty): void;
    addPrivatePropertyToList(prop: DzProperty): DzError;
    addProperty(prop: DzProperty): DzError;
    addPropertyInternal(newprop: DzProperty): void;
    addPropertyToList(prop: DzProperty): DzError;
    beginEdit(): void;
    cancelEdit(): void;
    clearAllAnimData(): void;
    clearAnimData(range: DzTimeRange): void;
    copyFrom(source: DzElement): void;
    copyToClipboard(contentTypes: String[]): DzElementClipboard;
    defaultPropertyGroupTree(): DzPropertyGroupTree;
    deleteDataItem(item: DzElementData): DzError;
    duplicateMissingCustomData(tgt: DzElement): void;
    duplicateMissingPrivateProperties(tgt: DzElement): void;
    duplicateMissingProperties(tgt: DzElement): void;
    elementChildIterator(): DzElementListIterator;
    findDataItem(dataName: QString): DzElementData;
    findMatchingProperty(srcProp: DzProperty): DzProperty;
    findPrivateProperty(name: QString): DzProperty;
    findPrivateProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPrivateProperty(name: QString): DzProperty;
    findPrivateProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPrivatePropertyByLabel(label: QString): DzProperty;
    findPrivatePropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    findProperty(name: QString): DzProperty;
    findProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPropertyByLabel(label: QString): DzProperty;
    findPropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    finishEdit(): void;
    getAttributes(settings: DzSettings): void;
    getDataItem(index: number): DzElementData;
    getDataItemList(): QObject[];
    getElementChild(which: number): DzElement;
    getElementParent(): DzElement;
    getIsPropertyTreeOwnedByParent(): boolean;
    getLabel(): string;
    getLoadScript(): DzScript;
    getNumDataItems(): number;
    getNumElementChildren(): number;
    getNumPrivateProperties(): number;
    getNumProperties(): number;
    getPrivateProperty(index: number): DzProperty;
    getPrivatePropertyGroups(): DzPropertyGroupTree;
    getPrivatePropertyList(): DzProperty[];
    getProperty(index: number): DzProperty;
    getPropertyGroups(): DzPropertyGroupTree;
    getPropertyList(): DzProperty[];
    inEdit(): boolean;
    insertPrivateProperty(index: number, prop: DzProperty): DzError;
    insertPrivatePropertyInList(index: number, prop: DzProperty): DzError;
    insertProperty(index: number, prop: DzProperty): DzError;
    insertPropertyInList(index: number, prop: DzProperty): DzError;
    isDataItemNameUnique(dataName: QString, makeUnique: boolean): boolean;
    isPrivatePropertyNameUnique(name: QString, makeUnique: boolean): boolean;
    isPropertyNameUnique(name: QString, makeUnique: boolean): boolean;
    labelChanged(newLabel: QString): void;
    movePrivateProperty(prop: DzProperty, element: DzElement): DzError;
    moveProperty(prop: DzProperty, element: DzElement): DzError;
    parentChanged(): void;
    privatePropertyAdded(prop: DzProperty): void;
    privatePropertyListChanged(): void;
    privatePropertyListIterator(): DzPropertyListIterator;
    privatePropertyRemoved(prop: DzProperty): void;
    privatePropertyTreeChanged(): void;
    propertyAdded(prop: DzProperty): void;
    propertyListChanged(): void;
    propertyListIterator(): DzPropertyListIterator;
    propertyRemoved(prop: DzProperty): void;
    propertyTreeChanged(): void;
    regroupPrivateProperties(tree: DzPropertyGroupTree): void;
    regroupProperties(tree: DzPropertyGroupTree): void;
    removeDataItem(item: DzElementData): DzError;
    removeElementChild(child: DzElement): void;
    removePrivateProperty(prop: DzProperty): DzError;
    removePrivateProperty(name: QString): DzError;
    removePrivateProperty(prop: DzProperty): DzError;
    removePrivateProperty(name: QString): DzError;
    removeProperty(prop: DzProperty): DzError;
    removeProperty(name: QString): DzError;
    removeProperty(prop: DzProperty): DzError;
    removeProperty(name: QString): DzError;
    setAttributes(settings: DzSettings): DzElement;
    setElementParent(elem: DzElement, regroup: boolean): void;
    setIsPropertyTreeOwnedByParent(onoff: boolean): void;
    setLabel(name: QString): DzError;
    setLoadScript(script: DzScript): void;
    shouldSortOnLoad(): boolean;
    update(): void;
    getElementName(): QString;
    paste(elem: DzElement, contentTypes: String[]): DzError;
    duplicate(owner: DzElement): DzElementData;
    writeDataItem(dataItem: DzElementData, io: any): boolean;
    writeScene(io: any): boolean;
    shouldWriteProperty(prop: DzProperty): boolean;
    applyToProperty(prop: DzProperty, opts: DzFileIOSettings): boolean;
    getPropertyName(): QString;
    setPropertyName(name: QString): void;
    writeProperty(file: DzAssetOutFile, io: any, prop: DzProperty): boolean;
    writePropertyValue(file: DzAssetOutFile, io: any, prop: DzProperty): boolean;
    applyToElement(elem: DzElement, checkPrivateProperties: boolean, opts: DzFileIOSettings): boolean;
    writeElementProperties(file: DzAssetOutFile, io: any, elem: DzElement, filter: DzElementPropertyIOFilter): boolean;
    writeProperties(file: DzAssetOutFile, io: any, propIt: DzPropertyListIterator, filter: DzElementPropertyIOFilter): boolean;
}